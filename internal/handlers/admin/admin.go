package admin

import (
	"context"
	"fmt"
	"github.com/mr-linch/go-tg"
	"github.com/mr-linch/go-tg/tgb"
	"github.com/mr-linch/go-tg/tgb/session"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"io"
	"tacy/internal/models"
	"tacy/internal/services/userService"
)

type AdminHandler struct {
	sessionManager *session.Manager[models.Session]
	UserService    userService.USUsecase
	Logger         zerolog.Logger
	Client         *tg.Client
}

func NewAdminHandler(
	sm *session.Manager[models.Session],
	UserService userService.USUsecase,
	logger zerolog.Logger,
	client *tg.Client,
) *AdminHandler {
	return &AdminHandler{
		sessionManager: sm,
		UserService:    UserService,
		Logger:         logger,
		Client:         client,
	}
}

func (h *AdminHandler) AdminStartMenuHandler(ctx context.Context, msg *tgb.MessageUpdate) error {
	switch msg.Text {
	case models.AdminStartMenu.AdminEnter:
		h.Logger.Info().Msg(msg.Text + " fetched.")
		h.sessionManager.Get(ctx).Step = models.SessionStepEnterAdminMenuHandler
		kb := tg.NewReplyKeyboardMarkup(
			tg.NewButtonColumn(
				tg.NewKeyboardButton(models.AdminMenu.InsertNewPhoto),
				tg.NewKeyboardButton(models.AdminMenu.InsertNewCompliment),
				tg.NewKeyboardButton(models.AdminMenu.GetAllPhotos),
				tg.NewKeyboardButton(models.AdminMenu.GetAllCompliments),
				tg.NewKeyboardButton(models.AdminMenu.GetComplimentNow),
			)...,
		).WithResizeKeyboardMarkup()
		return msg.Update.Reply(ctx, msg.Answer(fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")).
			ReplyMarkup(kb))
	default:
		h.Logger.Warn().Msg(msg.Text + " fetched. Unknown endpoint.")
		h.sessionManager.Get(ctx).Step = models.SessionStepInit
		return msg.Answer("–ù–∞–ø–∏—à–∏—Ç–µ /start").ReplyMarkup(tg.NewReplyKeyboardRemove()).DoVoid(ctx)
	}
}

func (h *AdminHandler) AdminMenuHandler(ctx context.Context, msg *tgb.MessageUpdate) error {
	switch msg.Text {
	case models.AdminMenu.InsertNewPhoto:
		h.sessionManager.Get(ctx).Step = models.SessionStepInsertNewPhotoMenuHandler
		kb := tg.NewReplyKeyboardMarkup(
			tg.NewButtonColumn(
				tg.NewKeyboardButton(models.AdminStartMenu.AdminEnter),
			)...,
		).WithResizeKeyboardMarkup()
		return msg.Update.Reply(ctx, msg.Answer(fmt.Sprintf("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ–¥–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å")).
			ReplyMarkup(kb))
	case models.AdminMenu.InsertNewCompliment:
		h.sessionManager.Get(ctx).Step = models.SessionStepInsertNewComplimentMenuHandler
		kb := tg.NewReplyKeyboardMarkup(
			tg.NewButtonColumn(
				tg.NewKeyboardButton(models.AdminStartMenu.AdminEnter),
			)...,
		).WithResizeKeyboardMarkup()
		return msg.Update.Reply(ctx, msg.Answer(fmt.Sprintf("–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å")).
			ReplyMarkup(kb))

	case models.AdminMenu.GetAllCompliments:
		return h.AdminMenuGetAllComplimentsHandler(ctx, msg)

	case models.AdminMenu.GetAllPhotos:
		return h.AdminMenuGetAllPhotosHandler(ctx, msg)
	default:
		h.Logger.Info().Msg(msg.Text + " fetched. Unknown endpoint")
		h.sessionManager.Get(ctx).Step = models.SessionStepInit
		return msg.Answer("–ù–∞–ø–∏—à–∏—Ç–µ /start").ReplyMarkup(tg.NewReplyKeyboardRemove()).DoVoid(ctx)
	}
}

func (h *AdminHandler) AdminMenuInsertPhotoHandler(ctx context.Context, msg *tgb.MessageUpdate) error {
	if msg.Photo != nil {
		h.Logger.Info().Msg("Photo" + " fetched.")
		photo := msg.Message.Photo[len(msg.Message.Photo)-1]
		file, err := h.Client.GetFile(photo.FileID).Do(ctx)
		if err != nil {
			h.Logger.Warn().Err(err)
			return msg.Update.Reply(ctx, msg.Answer("unable"))
		}
		if file.FileSize == 0 {
			h.Logger.Warn().Msg("file is nil")
			return msg.Update.Reply(ctx, msg.Answer("unable"))
		}
		photoRC, err := h.Client.Download(ctx, file.FilePath)
		if err != nil {
			h.Logger.Warn().Err(err)
			return msg.Update.Reply(ctx, msg.Answer("Unable to add photo."))
		}
		defer func() {
			if err := photoRC.Close(); err != nil {
				h.Logger.Warn().Err(err)
			}
		}()
		bytes, err := io.ReadAll(photoRC)
		if err != nil {
			h.Logger.Warn().Err(err)
			return msg.Update.Reply(ctx, msg.Answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–æ—Ç–æ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
		}
		err = h.UserService.InsertPhoto(ctx, bytes, false)
		if err != nil {
			log.Warn().Err(err).Msg("Photo not added to db.")
			return msg.Update.Reply(ctx, msg.Answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–æ—Ç–æ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"))
		}
		h.Logger.Info().Msg("Photo added.")
		return msg.Update.Reply(ctx, msg.Answer("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ."))
	}
	switch msg.Text {
	case models.AdminStartMenu.AdminEnter:
		h.sessionManager.Get(ctx).Step = models.SessionStepEnterAdminMenuHandler
		return h.AdminStartMenuHandler(ctx, msg)
	default:
		h.sessionManager.Get(ctx).Step = models.SessionStepInit
		return msg.Answer("–ù–∞–ø–∏—à–∏—Ç–µ /start").ReplyMarkup(tg.NewReplyKeyboardRemove()).DoVoid(ctx)
	}
}

func (h *AdminHandler) AdminMenuInsertNewComplimentHandler(ctx context.Context, msg *tgb.MessageUpdate) error {
	//–≤ –±—É–¥—É—â–µ–º - –¥–æ–±–∞–≤–∏—Ç—å update –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã
	switch msg.Text {
	case models.AdminStartMenu.AdminEnter:
		h.sessionManager.Get(ctx).Step = models.SessionStepEnterAdminMenuHandler
		return h.AdminStartMenuHandler(ctx, msg)
	default:
		err := h.UserService.InsertComplimentFromAdmin(ctx, msg.Text)
		if err != nil {
			h.sessionManager.Get(ctx).Step = models.SessionStepInit
			return msg.Answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /start").ReplyMarkup(tg.NewReplyKeyboardRemove()).
				DoVoid(ctx)
		}
		return msg.Answer("–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!)").DoVoid(ctx)
	}
}

func (h *AdminHandler) AdminMenuGetAllPhotosHandler(ctx context.Context, msg *tgb.MessageUpdate) error {
	photos, err := h.UserService.OutputAllPhotos(ctx)
	if err != nil {
		h.Logger.Warn().Err(err).Msg("Unable to get photos.")
		return msg.Update.Reply(ctx, msg.Answer("Unable to get photos."))
	}
	for _, photo := range photos {
		file := tg.NewInputFileBytes("photo", photo)
		msg.Update.Reply(ctx, msg.AnswerPhoto(tg.NewFileArgUpload(file)))
	}
	if err != nil {
		h.Logger.Warn().Err(err).Msg("Unable to send photo.")
		return msg.Update.Reply(ctx, msg.Answer("Unable to send photo."))
	}
	if err == nil {
		h.sessionManager.Get(ctx).Step = models.SessionStepEnterAdminMenuHandler
		return msg.Update.Reply(ctx, msg.Answer("Done!"))
	}
	switch msg.Text {
	case models.AdminStartMenu.AdminEnter:
		h.sessionManager.Get(ctx).Step = models.SessionStepEnterAdminMenuHandler
		return h.AdminStartMenuHandler(ctx, msg)
	default:
		h.sessionManager.Get(ctx).Step = models.SessionStepInit
		return msg.Answer("–ù–∞–ø–∏—à–∏—Ç–µ /start").ReplyMarkup(tg.NewReplyKeyboardRemove()).DoVoid(ctx)
	}
}

func (h *AdminHandler) AdminMenuGetAllComplimentsHandler(ctx context.Context, msg *tgb.MessageUpdate) error {
	compliments, err := h.UserService.OutputAllCompliments(ctx)
	if err != nil {
		h.Logger.Warn().Err(err).Msg("Unable to get compliments.")
		return msg.Update.Reply(ctx, msg.Answer("Unable to get compliments."))
	}
	for _, compliment := range compliments {
		err = msg.Answer(compliment).DoVoid(ctx)
		if err != nil {
			h.Logger.Warn().Err(err).Msg("Unable to send compliment.")
			return msg.Update.Reply(ctx, msg.Answer("Unable to set compliment."))
		}
	}
	if err == nil {
		return msg.Answer("–í—Å–µ!").DoVoid(ctx)
	}
	switch msg.Text {
	case models.AdminStartMenu.AdminEnter:
		h.sessionManager.Get(ctx).Step = models.SessionStepEnterAdminMenuHandler
		return h.AdminStartMenuHandler(ctx, msg)
	default:
		h.sessionManager.Get(ctx).Step = models.SessionStepInit
		return msg.Answer("–ù–∞–ø–∏—à–∏—Ç–µ /start").ReplyMarkup(tg.NewReplyKeyboardRemove()).DoVoid(ctx)
	}
}

func (h *AdminHandler) AdminGetComplimentByRandomHandler(ctx context.Context, msg *tgb.MessageUpdate) error {
	h.Logger.Info().Msg(msg.Text + " fetched.")
	photo, compliment, err := h.UserService.OutputComplimentAndPhotoByRandom(ctx)
	if err != nil {
		h.Logger.Warn().Err(err)
		return msg.Answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò° –ù–∞–ø–∏—à–∏ –º–Ω–µ –∏ —è –≤—Å–µ –ø–æ–¥–ø—Ä–∞–≤–ª—é üëåüèª").DoVoid(ctx)
	}
	err = msg.AnswerPhoto(tg.NewFileArgUpload(tg.NewInputFileBytes("photo", photo))).DoVoid(ctx)
	if err != nil {
		h.Logger.Warn().Err(err)
		return msg.Answer("–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ üò¢").DoVoid(ctx)
	}
	err = msg.Answer(compliment).DoVoid(ctx)
	if err != nil {
		h.Logger.Warn().Err(err)
		return msg.Answer("–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç üò¢ –ù–æ –º—ã –≤—Å–µ –∑–Ω–∞–µ–º, —á—Ç–æ –¥–∞–∂–µ —Ç–∞–∫ —Ç—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ " +
			"\U0001F979").DoVoid(ctx)
	}
	return msg.Answer("–Ø –Ω–∞–¥–µ—é—Å—å —Ç—ã —Ä–∞–¥–∞!!)").DoVoid(ctx)
}
